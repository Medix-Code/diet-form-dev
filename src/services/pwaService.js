/**
 * @file pwaInstallHandler.js
 * @description Gestiona la l√≤gica per al prompt d'instal¬∑laci√≥ de la PWA,
 * incloent la captura de l'esdeveniment, la interacci√≥ de l'usuari i
 * la persist√®ncia de l'estat.
 * @module pwaInstallHandler
 */

// --- Constants ---
const LS_KEYS = {
  IS_INSTALLED: "pwa_isInstalled",
  TIMES_DISMISSED: "pwa_timesDismissed",
  NEVER_SHOW_AGAIN: "pwa_neverShowInstallPrompt",
  // PDF_DOWNLOADS_SINCE_DISMISS: 'pwa_pdfDownloadsSinceNo', // Sembla no utilitzat aqu√≠, per√≤ el mantenim si √©s rellevant en un altre lloc
};
const CSS_CLASSES = {
  INSTALL_PROMPT_VISIBLE: "visible", // Classe per mostrar el banner
};
const MAX_DISMISSALS = 2; // Nombre m√†xim de vegades que l'usuari pot descartar abans d'amagar permanentment

// --- Variables d'Estat del M√≤dul ---
let deferredInstallPrompt = null; // Emmagatzema l'esdeveniment 'beforeinstallprompt'
let installButtonElement = null;
let dismissButtonElement = null;
let installPromptElement = null;
let isInitialized = false;

// --- Funcions Auxiliars per a localStorage ---

/** Obt√© un valor num√®ric de localStorage. */
const getLsNumber = (key, defaultValue = 0) =>
  parseInt(localStorage.getItem(key) || String(defaultValue), 10);

/** Obt√© un valor boole√† de localStorage. */
const getLsBoolean = (key) => localStorage.getItem(key) === "true";

/** Estableix un valor a localStorage (converteix a string). */
const setLsValue = (key, value) => localStorage.setItem(key, String(value));

/** Elimina un valor de localStorage. */
const removeLsValue = (key) => localStorage.removeItem(key);

// --- Funcions Principals ---

/**
 * Comprova si l'aplicaci√≥ s'est√† executant en mode standalone o ja est√† marcada com instal¬∑lada.
 * @returns {boolean} True si l'app es considera instal¬∑lada.
 */
export function isAppInstalled() {
  // Prioritza Media Query, √©s l'est√†ndard modern
  const isStandalone = window.matchMedia("(display-mode: standalone)").matches;
  // navigator.standalone √©s per a iOS Safari m√©s antic
  const isLegacyStandalone = window.navigator.standalone === true;
  // Comprovaci√≥ final amb localStorage (si l'usuari va acceptar el prompt)
  const isMarkedInstalled = getLsBoolean(LS_KEYS.IS_INSTALLED);

  return isStandalone || isLegacyStandalone || isMarkedInstalled;
}

/**
 * Amaga el banner d'instal¬∑laci√≥ personalitzat.
 */
function hideInstallBanner() {
  if (installPromptElement) {
    installPromptElement.classList.remove(CSS_CLASSES.INSTALL_PROMPT_VISIBLE);
    // console.info('[PWA Install] Banner d\'instal¬∑laci√≥ amagat.');
  }
}

/**
 * Mostra el banner d'instal¬∑laci√≥ personalitzat si √©s pertinent.
 * Es pot cridar manualment o autom√†ticament despr√©s de capturar `beforeinstallprompt`.
 * @param {boolean} [forceShow=false] - Si √©s true, ignora la comprovaci√≥ 'neverShowAgain'. √ötil per a proves.
 */
export function showInstallBanner(forceShow = false) {
  // No mostra si: ja est√† instal¬∑lada, l'usuari ha demanat no mostrar-ho m√©s (tret que es forci),
  // o si no tenim un prompt per oferir, o l'element del banner no existeix.
  if (
    isAppInstalled() ||
    (!forceShow && getLsBoolean(LS_KEYS.NEVER_SHOW_AGAIN)) ||
    !deferredInstallPrompt ||
    !installPromptElement
  ) {
    // console.info('[PWA Install] No es mostra el banner (ja instal¬∑lada, bloquejada, sense prompt o element).');
    return;
  }

  installPromptElement.classList.add(CSS_CLASSES.INSTALL_PROMPT_VISIBLE);
  console.info("[PWA Install] Banner d'instal¬∑laci√≥ mostrat.");
}

/**
 * Gestiona l'acci√≥ de l'usuari de descartar el prompt d'instal¬∑laci√≥.
 * Incrementa el comptador de descarts i decideix si cal deixar de mostrar el prompt.
 */
function handleDismissAction() {
  hideInstallBanner(); // Amaga immediatament
  let dismissCount = getLsNumber(LS_KEYS.TIMES_DISMISSED);
  dismissCount++;
  setLsValue(LS_KEYS.TIMES_DISMISSED, dismissCount);
  console.log(
    `[PWA Install] Banner descartat per l'usuari (vegada ${dismissCount}).`
  );

  // Opcional: Reiniciar comptador de desc√†rregues si √©s rellevant
  // setLsValue(LS_KEYS.PDF_DOWNLOADS_SINCE_DISMISS, 0);

  if (dismissCount >= MAX_DISMISSALS) {
    setLsValue(LS_KEYS.NEVER_SHOW_AGAIN, true);
    console.warn(
      `[PWA Install] L'usuari ha descartat la instal¬∑laci√≥ ${dismissCount} vegades. No es tornar√† a oferir autom√†ticament.`
    );
  }
}

/**
 * Gestiona el clic al bot√≥ d'instal¬∑laci√≥ personalitzat.
 * Mostra el di√†leg natiu del navegador.
 */
async function handleInstallAction() {
  if (!deferredInstallPrompt) {
    console.error(
      "[PWA Install] S'ha intentat instal¬∑lar, per√≤ deferredInstallPrompt √©s nul."
    );
    return;
  }

  // Amaga el nostre banner abans de mostrar el prompt natiu
  hideInstallBanner();

  try {
    console.info("[PWA Install] Mostrant el di√†leg d'instal¬∑laci√≥ natiu...");
    deferredInstallPrompt.prompt(); // Mostra el prompt del navegador

    // Espera la decisi√≥ de l'usuari
    const { outcome } = await deferredInstallPrompt.userChoice;

    if (outcome === "accepted") {
      console.log("[PWA Install] ‚úÖ Usuari ha ACCEPTAT la instal¬∑laci√≥.");
      setLsValue(LS_KEYS.IS_INSTALLED, true);
      // Opcionalment, podem amagar permanentment el bot√≥/prompt si volem
      // setLsValue(LS_KEYS.NEVER_SHOW_AGAIN, true);
    } else {
      console.log("[PWA Install] ‚ùå Usuari ha REBUTJAT o tancat el di√†leg.");
      // Podr√≠em tractar el rebuig expl√≠cit igual que un 'dismiss' si volem
      // handleDismissAction();
    }
  } catch (error) {
    console.error(
      "[PWA Install] Error durant el proc√©s de prompt/userChoice:",
      error
    );
  } finally {
    // Important: El prompt nom√©s es pot utilitzar una vegada.
    deferredInstallPrompt = null;
    // console.info('[PWA Install] deferredInstallPrompt resetejat a null.');
  }
}

/**
 * Configura els listeners per als botons d'instal¬∑lar i descartar.
 */
function linkInstallControls() {
  if (installButtonElement) {
    installButtonElement.addEventListener("click", handleInstallAction);
    // console.info('[PWA Install] Listener afegit al bot√≥ d\'instal¬∑laci√≥.');
  } else {
    console.warn(
      "[PWA Install] No s'ha trobat el bot√≥ d'instal¬∑laci√≥ (#install-button) per afegir listener."
    );
  }

  if (dismissButtonElement) {
    dismissButtonElement.addEventListener("click", handleDismissAction);
    // console.info('[PWA Install] Listener afegit al bot√≥ de descartar.');
  } else {
    console.warn(
      "[PWA Install] No s'ha trobat el bot√≥ de descartar (#dismiss-button) per afegir listener."
    );
  }
}

/**
 * Gestiona l'esdeveniment 'beforeinstallprompt'.
 * Emmagatzema l'esdeveniment per a un √∫s posterior.
 * @param {Event} event - L'objecte d'esdeveniment BeforeInstallPromptEvent.
 */
function handleBeforeInstallPrompt(event) {
  // Prev√© el mini-infobar per defecte en alguns navegadors (Chrome Mobile)
  event.preventDefault();

  // Emmagatzema l'esdeveniment per poder cridar prompt() m√©s tard
  deferredInstallPrompt = event;
  console.info(
    '[PWA Install] üì¢ Event "beforeinstallprompt" capturat i emmagatzemat.'
  );

  // Decideix si vols mostrar el teu banner personalitzat immediatament
  // o esperar una acci√≥ espec√≠fica de l'usuari o un altre moment.
  // Per exemple, per mostrar-lo directament:
  showInstallBanner();

  // Assegura't que els botons (si no estaven ja enlla√ßats) estiguin llestos
  // Aix√≤ √©s √∫til si el DOM es carrega abans que l'esdeveniment es dispari
  if (installButtonElement && dismissButtonElement && !isInitialized) {
    // Potser no cal tornar a enlla√ßar si initPwaInstall ja ho ha fet.
    // console.log('[PWA Install] Botons ja haurien d'estar enlla√ßats per init.');
  }
}

/**
 * Monitoritza els canvis en el mode de visualitzaci√≥ (per detectar instal¬∑lacions/desinstal¬∑lacions).
 */
function monitorDisplayModeChanges() {
  try {
    const mq = window.matchMedia("(display-mode: standalone)");
    mq.addEventListener("change", (evt) => {
      if (evt.matches) {
        console.log(
          "[PWA Install] ‚úÖ App detectada en mode standalone (instal¬∑lada)."
        );
        setLsValue(LS_KEYS.IS_INSTALLED, true);
        hideInstallBanner(); // Amaga el banner si encara era visible
      } else {
        console.log("[PWA Install] ‚ÑπÔ∏è App ha sortit del mode standalone.");
        // No eliminem IS_INSTALLED necess√†riament, ja que l'usuari
        // podria haver-la instal¬∑lat i despr√©s obrir-la al navegador.
        // Podria ser millor gestionar la desinstal¬∑laci√≥ d'una altra manera si cal.
      }
    });
  } catch (error) {
    console.error(
      "[PWA Install] Error en configurar el monitor de display-mode:",
      error
    );
  }
}

/**
 * Inicialitza tota la l√≤gica relacionada amb el prompt d'instal¬∑laci√≥ de la PWA.
 * Aquesta funci√≥ s'hauria de cridar quan el DOM estigui llest.
 * @export
 */
export function initPwaInstall() {
  // Evita reinicialitzacions
  if (isInitialized) {
    console.warn("[PWA Install] Ja inicialitzat.");
    return;
  }

  // Comprovaci√≥ inicial: si ja est√† instal¬∑lada, no cal fer gaireb√© res m√©s
  if (isAppInstalled()) {
    console.info("[PWA Install] App ja detectada com instal¬∑lada a l'inici.");
    // Encara podem monitoritzar canvis per si es desinstal¬∑la
    monitorDisplayModeChanges();
    isInitialized = true; // Marca com inicialitzat per evitar treball redundant
    return;
  }

  // Si l'usuari ha demanat no tornar a veure el prompt, nom√©s monitoritzem
  if (getLsBoolean(LS_KEYS.NEVER_SHOW_AGAIN)) {
    console.info(
      "[PWA Install] L'usuari ha demanat no veure m√©s el prompt. Nom√©s es monitoritzar√† l'estat."
    );
    monitorDisplayModeChanges();
    isInitialized = true;
    return;
  }

  console.info("[PWA Install] Inicialitzant gestor d'instal¬∑laci√≥ PWA...");

  // Cacheja els elements del DOM necessaris
  installPromptElement = document.getElementById("install-prompt");
  installButtonElement = document.getElementById("install-button");
  dismissButtonElement = document.getElementById("dismiss-button");

  // Comprova si els elements essencials del banner existeixen
  if (!installPromptElement || !installButtonElement || !dismissButtonElement) {
    console.warn(
      "[PWA Install] Falten un o m√©s elements del DOM per al banner personalitzat (#install-prompt, #install-button, #dismiss-button). La funcionalitat del banner pot estar limitada."
    );
    // Podem decidir si continuar sense el banner personalitzat o aturar-nos.
    // Continuarem nom√©s amb la captura de l'esdeveniment.
  } else {
    // Si tenim els elements, enllacem els controls
    linkInstallControls();
  }

  // Escolta l'esdeveniment clau
  window.addEventListener("beforeinstallprompt", handleBeforeInstallPrompt);
  console.info('[PWA Install] Listener per a "beforeinstallprompt" afegit.');

  // Monitoritza canvis en el mode d'instal¬∑laci√≥
  monitorDisplayModeChanges();

  isInitialized = true;
  console.info(
    "[PWA Install] Gestor d'instal¬∑laci√≥ PWA inicialitzat correctament."
  );
}

/**
 * Incrementa comptadors interns (si √©s necessari) i decideix si
 * mostrar el banner d'instal¬∑laci√≥ despr√©s d'una acci√≥ clau de l'usuari (ex: desc√†rrega PDF).
 * Cont√© la l√≤gica de "mostrar a la primera", "mostrar despr√©s de X accions si rebutjat 1 cop".
 * @export
 */
export function requestInstallPromptAfterAction() {
  // Comprovacions inicials (ja instal¬∑lat, neverShow, no hi ha prompt disponible?)
  if (
    isAppInstalled() ||
    getLsBoolean(LS_KEYS.NEVER_SHOW_AGAIN) ||
    !deferredInstallPrompt
  ) {
    console.info(
      "[PWA Install] No es requereix acci√≥ de prompt (instal¬∑lat, bloquejat o sense prompt)."
    );
    return;
  }

  const dismissCount = getLsNumber(LS_KEYS.TIMES_DISMISSED);
  console.log(
    `[PWA Install] Comprovant si mostrar prompt. Vegades descartat: ${dismissCount}`
  );

  if (dismissCount === 0) {
    // Primera vegada que es considera mostrar despr√©s d'una acci√≥ clau.
    // Podem afegir un retard per no ser intrusius.
    console.info(
      "[PWA Install] Programant mostra del banner (primera oportunitat post-acci√≥)..."
    );
    setTimeout(() => {
      showInstallBanner(); // Mostra el banner personalitzat
    }, 3000); // Retard de 3 segons (ajustable)
  } else if (dismissCount === 1) {
    // L'usuari ja ho ha descartat un cop. Esperem m√©s accions.
    // Aquesta l√≤gica podria basar-se en un comptador d'accions (com l'antic pdfDownloadsSinceNo)
    // O simplement podr√≠em decidir no tornar-ho a mostrar autom√†ticament despr√©s d'un descart.
    // Exemple: Requereix X accions des de l'√∫ltim descart
    // let actionsSinceDismiss = getLsNumber(LS_KEYS.PDF_DOWNLOADS_SINCE_DISMISS); // Necessitaria una clau gen√®rica
    // actionsSinceDismiss++;
    // setLsValue(LS_KEYS.PDF_DOWNLOADS_SINCE_DISMISS, actionsSinceDismiss);
    // const ACTIONS_THRESHOLD = 5; // Ex: mostrar despr√©s de 5 accions m√©s
    // if (actionsSinceDismiss >= ACTIONS_THRESHOLD) {
    //    console.info(`[PWA Install] Programant mostra del banner (${actionsSinceDismiss} accions des de l'√∫ltim descart)...`);
    //    setTimeout(() => {
    //        showInstallBanner();
    //    }, 3000);
    //    setLsValue(LS_KEYS.PDF_DOWNLOADS_SINCE_DISMISS, 0); // Reinicia el comptador
    // } else {
    //     console.info(`[PWA Install] Encara no s'han complert les ${ACTIONS_THRESHOLD} accions des de l'√∫ltim descart (${actionsSinceDismiss}).`);
    // }

    // Alternativa m√©s simple: Si l'usuari ja ha dit NO un cop, no el molestem m√©s autom√†ticament.
    console.info(
      "[PWA Install] L'usuari ja ha descartat el banner un cop. No es mostrar√† autom√†ticament de nou."
    );
  }
  // Si dismissCount >= MAX_DISMISSALS, ja ho gestiona la comprovaci√≥ inicial de NEVER_SHOW_AGAIN
}
