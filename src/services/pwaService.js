/**
 * L√≤gica de PWA (Prompt d'instal¬∑laci√≥, etc.)
 *
 */

let deferredPrompt = null;

/**
 * Configura l'escolta de "beforeinstallprompt" i mostra el prompt immediatament
 */
export function setupInstallPrompt() {
  console.log(
    "‚úÖ setupInstallPrompt() carregat! Esperant beforeinstallprompt..."
  );

  window.addEventListener("beforeinstallprompt", (evt) => {
    console.log("üì¢ Evento beforeinstallprompt capturat!");
    evt.preventDefault();
    deferredPrompt = evt;

    // Mostrem el prompt immediatament per provar al inici
    console.log("‚è∞ Mostrant el prompt d'instal¬∑laci√≥ immediatament...");
    showInstallPrompt();
  });

  // Enlla√ß dels botons d'instal¬∑laci√≥ i tancament
  linkInstallButtons();
}

/**
 * Enlla√ßa els botons d'instal¬∑laci√≥ i de tancament del banner
 */
function linkInstallButtons() {
  const installButton = document.getElementById("install-button");
  if (installButton) {
    installButton.addEventListener("click", async () => {
      if (deferredPrompt) {
        console.log("üì• Mostrant el di√†leg d'instal¬∑laci√≥...");
        await deferredPrompt.prompt();

        const choiceResult = await deferredPrompt.userChoice;
        if (choiceResult.outcome === "accepted") {
          console.log("‚úÖ L'usuari ha acceptat la instal¬∑laci√≥.");
          localStorage.setItem("isAppInstalled", "true");
          hideInstallPrompt();
        } else {
          console.log("‚ùå L'usuari ha rebutjat la instal¬∑laci√≥.");
        }
        deferredPrompt = null;
        localStorage.setItem("deferredPromptExists", "false");
      } else {
        console.log("‚ö†Ô∏è deferredPrompt no est√† definit.");
      }
    });
  } else {
    console.warn("‚ö†Ô∏è No s'ha trobat el bot√≥ d'instal¬∑laci√≥ (#install-button).");
  }

  const dismissButton = document.getElementById("dismiss-button");
  if (dismissButton) {
    dismissButton.addEventListener("click", () => {
      console.log("üö´ L'usuari ha descartat el banner d'instal¬∑laci√≥.");
      onUserDismissInstall();
    });
  } else {
    console.warn("‚ö†Ô∏è No s'ha trobat el bot√≥ de tancament (#dismiss-button).");
  }
}

/**
 * Mostra el banner d'instal¬∑laci√≥
 */
export function showInstallPrompt() {
  console.log("üîç Intentant mostrar el prompt de PWA...");
  if (!deferredPrompt) {
    console.warn(
      "‚ö†Ô∏è deferredPrompt √©s NULL! El navegador no ha disparat l'event."
    );
    return;
  }
  const installPrompt = document.getElementById("install-prompt");
  if (installPrompt) {
    installPrompt.classList.add("visible");
    console.log("‚úÖ Banner d'instal¬∑laci√≥ mostrat.");
  } else {
    console.warn("‚ö†Ô∏è No s'ha trobat l'element #install-prompt.");
  }
}

/**
 * Amaga el banner d'instal¬∑laci√≥
 */
export function hideInstallPrompt() {
  const installPrompt = document.getElementById("install-prompt");
  if (installPrompt) {
    installPrompt.classList.remove("visible");
    console.log("üö´ S'ha amagat el banner d'instal¬∑laci√≥.");
  }
}

/**
 * Gesti√≥ de la decisi√≥ de l'usuari (descarta el prompt)
 */
export function onUserDismissInstall() {
  let timesUserSaidNo = +localStorage.getItem("timesUserSaidNo") || 0;
  timesUserSaidNo++;
  localStorage.setItem("timesUserSaidNo", String(timesUserSaidNo));

  // Reiniciem el comptador de desc√†rregues des de l'√∫ltim "No"
  localStorage.setItem("pdfDownloadsSinceNo", "0");

  // Si l'usuari ha dit "No" dues vegades, no es tornar√† a mostrar
  if (timesUserSaidNo >= 2) {
    localStorage.setItem("neverShowInstallPrompt", "true");
    console.log(
      "üö´ L'usuari ha descartat la instal¬∑laci√≥ massa vegades. No es tornar√† a mostrar."
    );
  }

  hideInstallPrompt();
}

/**
 * Comprova si l'aplicaci√≥ ja est√† instal¬∑lada
 */
export function isAppInstalled() {
  return (
    window.matchMedia("(display-mode: standalone)").matches ||
    window.navigator.standalone === true ||
    localStorage.getItem("isAppInstalled") === "true"
  );
}

/**
 * Monitora el mode de visualitzaci√≥ (standalone o navegador)
 */
export function monitorDisplayMode() {
  const mq = window.matchMedia("(display-mode: standalone)");
  mq.addEventListener("change", () => {
    if (mq.matches) {
      console.log("‚úÖ La app s'est√† executant en mode standalone.");
      localStorage.setItem("isAppInstalled", "true");
      hideInstallPrompt();
    } else {
      console.log("‚ÑπÔ∏è La app ha sortit del mode standalone.");
      localStorage.removeItem("isAppInstalled");
    }
  });
}
