// js/pwa.js

let deferredPrompt = null;

// Funci√≥ per configurar l'event beforeinstallprompt
export function setupInstallPrompt() {
  console.log(
    "‚úÖ setupInstallPrompt() carregat! Esperant beforeinstallprompt..."
  );

  window.addEventListener("beforeinstallprompt", (evt) => {
    console.log("üì¢ Event beforeinstallprompt capturat correctament!");
    evt.preventDefault();
    deferredPrompt = evt;

    // Guardem deferredPrompt a localStorage per a depuraci√≥
    localStorage.setItem("deferredPromptExists", "true");

    // Mostrem el prompt nom√©s si l'event es captura correctament
    showInstallPrompt();
  });
}

// Funci√≥ per monitoritzar el mode de visualitzaci√≥
export function monitorDisplayMode() {
  const mq = window.matchMedia("(display-mode: standalone)");
  mq.addEventListener("change", () => {
    if (mq.matches) {
      console.log("‚úÖ L'app s'est√† executant en mode standalone.");
      localStorage.setItem("isAppInstalled", "true");
      hideInstallPrompt();
    } else {
      console.log("‚ÑπÔ∏è L'app ha sortit del mode standalone.");
      localStorage.removeItem("isAppInstalled");
    }
  });
}

// Funci√≥ per determinar si l'app est√† instal¬∑lada
export function isAppInstalled() {
  return (
    window.matchMedia("(display-mode: standalone)").matches ||
    window.navigator.standalone === true ||
    localStorage.getItem("isAppInstalled") === "true"
  );
}

// Funci√≥ per mostrar el prompt d'instal¬∑laci√≥
export function showInstallPrompt() {
  console.log("üîç Intentant mostrar el prompt d'instal¬∑laci√≥...");
  console.log("deferredPrompt:", deferredPrompt);

  if (!deferredPrompt) {
    console.warn("‚ö†Ô∏è deferredPrompt √©s NULL! No es pot mostrar el prompt.");
    console.log("‚ÑπÔ∏è Comprovant si `beforeinstallprompt` s'ha llan√ßat abans...");
    console.log(
      "localStorage[deferredPromptExists]:",
      localStorage.getItem("deferredPromptExists")
    );
    return;
  }

  const installPrompt = document.getElementById("install-prompt");
  if (installPrompt) {
    installPrompt.classList.add("visible");
    console.log("‚úÖ Banner d'instal¬∑laci√≥ mostrat.");
  } else {
    console.warn("‚ö†Ô∏è L'element #install-prompt no s'ha trobat.");
  }
}

// Funci√≥ per amagar el prompt d'instal¬∑laci√≥
export function hideInstallPrompt() {
  const installPrompt = document.getElementById("install-prompt");
  if (installPrompt) {
    installPrompt.classList.remove("visible");
    console.log("üö´ S'ha amagat el banner d'instal¬∑laci√≥.");
  }
}

// Funci√≥ per gestionar la decisi√≥ de l'usuari en rebutjar l'instal¬∑laci√≥
export function onUserDismissInstall() {
  let timesUserSaidNo = +localStorage.getItem("timesUserSaidNo") || 0;
  timesUserSaidNo++;
  localStorage.setItem("timesUserSaidNo", String(timesUserSaidNo));
  localStorage.setItem("pdfDownloadsSinceNo", "0");

  if (timesUserSaidNo >= 2) {
    localStorage.setItem("neverShowInstallPrompt", "true");
    console.log(
      "üö´ L'usuari ha descartat la instal¬∑laci√≥ massa vegades. No es tornar√† a mostrar."
    );
  }

  hideInstallPrompt();
}

// Funci√≥ per incrementar el comptador de desc√†rregues de PDF i potencialment mostrar el prompt
export function incrementPdfDownloadCountAndMaybeShowPrompt() {
  console.log("incrementPdfDownloadCountAndMaybeShowPrompt() s'ha executat");

  const installed = isAppInstalled();
  const neverShow = localStorage.getItem("neverShowInstallPrompt") === "true";

  console.log("Estat de la instal¬∑laci√≥:", installed, "neverShow:", neverShow);
  if (installed || neverShow) return;

  let timesUserSaidNo = +localStorage.getItem("timesUserSaidNo") || 0;
  console.log(
    "Vegades que l'usuari ha rebutjat la instal¬∑laci√≥:",
    timesUserSaidNo
  );

  if (timesUserSaidNo === 0) {
    setTimeout(() => {
      console.log("Mostrant prompt per primera vegada...");
      showInstallPrompt();
    }, 5000);
    return;
  }

  if (timesUserSaidNo === 1) {
    let pdfDownloadsSinceNo = +localStorage.getItem("pdfDownloadsSinceNo") || 0;
    pdfDownloadsSinceNo++;
    localStorage.setItem("pdfDownloadsSinceNo", String(pdfDownloadsSinceNo));

    console.log("PDFs descarregats des de l'√∫ltim no:", pdfDownloadsSinceNo);

    if (pdfDownloadsSinceNo >= 9) {
      setTimeout(() => {
        console.log("Mostrant prompt despr√©s de 9 desc√†rregues...");
        showInstallPrompt();
      }, 5000);
    }
  }
}
